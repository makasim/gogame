// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file gogame/v2/server.proto (package gogame.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum gogame.v2.Color
 */
export enum Color {
  /**
   * @generated from enum value: COLOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COLOR_BLACK = 1;
   */
  BLACK = 1,

  /**
   * @generated from enum value: COLOR_WHITE = 2;
   */
  WHITE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Color)
proto3.util.setEnumType(Color, "gogame.v2.Color", [
  { no: 0, name: "COLOR_UNSPECIFIED" },
  { no: 1, name: "COLOR_BLACK" },
  { no: 2, name: "COLOR_WHITE" },
]);

/**
 * @generated from message gogame.v2.Player
 */
export class Player extends Message<Player> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Player>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Player";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player {
    return new Player().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJsonString(jsonString, options);
  }

  static equals(a: Player | PlainMessage<Player> | undefined, b: Player | PlainMessage<Player> | undefined): boolean {
    return proto3.util.equals(Player, a, b);
  }
}

/**
 * @generated from message gogame.v2.Change
 */
export class Change extends Message<Change> {
  /**
   * @generated from oneof gogame.v2.Change.change
   */
  change: {
    /**
     * @generated from field: gogame.v2.Change.Move move = 1;
     */
    value: Change_Move;
    case: "move";
  } | {
    /**
     * @generated from field: gogame.v2.Change.Pass pass = 2;
     */
    value: Change_Pass;
    case: "pass";
  } | {
    /**
     * @generated from field: gogame.v2.Change.Undo undo = 3;
     */
    value: Change_Undo;
    case: "undo";
  } | {
    /**
     * @generated from field: gogame.v2.Change.End end = 4;
     */
    value: Change_End;
    case: "end";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "move", kind: "message", T: Change_Move, oneof: "change" },
    { no: 2, name: "pass", kind: "message", T: Change_Pass, oneof: "change" },
    { no: 3, name: "undo", kind: "message", T: Change_Undo, oneof: "change" },
    { no: 4, name: "end", kind: "message", T: Change_End, oneof: "change" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change {
    return new Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJsonString(jsonString, options);
  }

  static equals(a: Change | PlainMessage<Change> | undefined, b: Change | PlainMessage<Change> | undefined): boolean {
    return proto3.util.equals(Change, a, b);
  }
}

/**
 * @generated from message gogame.v2.Change.Move
 */
export class Change_Move extends Message<Change_Move> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  /**
   * @generated from field: gogame.v2.Color color = 2;
   */
  color = Color.UNSPECIFIED;

  /**
   * @generated from field: int32 x = 3;
   */
  x = 0;

  /**
   * @generated from field: int32 y = 4;
   */
  y = 0;

  /**
   * @generated from field: int32 captured_stones = 5;
   */
  capturedStones = 0;

  constructor(data?: PartialMessage<Change_Move>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Change.Move";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "color", kind: "enum", T: proto3.getEnumType(Color) },
    { no: 3, name: "x", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "captured_stones", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_Move {
    return new Change_Move().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_Move {
    return new Change_Move().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_Move {
    return new Change_Move().fromJsonString(jsonString, options);
  }

  static equals(a: Change_Move | PlainMessage<Change_Move> | undefined, b: Change_Move | PlainMessage<Change_Move> | undefined): boolean {
    return proto3.util.equals(Change_Move, a, b);
  }
}

/**
 * @generated from message gogame.v2.Change.Pass
 */
export class Change_Pass extends Message<Change_Pass> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  constructor(data?: PartialMessage<Change_Pass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Change.Pass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_Pass {
    return new Change_Pass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_Pass {
    return new Change_Pass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_Pass {
    return new Change_Pass().fromJsonString(jsonString, options);
  }

  static equals(a: Change_Pass | PlainMessage<Change_Pass> | undefined, b: Change_Pass | PlainMessage<Change_Pass> | undefined): boolean {
    return proto3.util.equals(Change_Pass, a, b);
  }
}

/**
 * @generated from message gogame.v2.Change.Undo
 */
export class Change_Undo extends Message<Change_Undo> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  /**
   * @generated from field: bool accepted = 3;
   */
  accepted = false;

  constructor(data?: PartialMessage<Change_Undo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Change.Undo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_Undo {
    return new Change_Undo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_Undo {
    return new Change_Undo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_Undo {
    return new Change_Undo().fromJsonString(jsonString, options);
  }

  static equals(a: Change_Undo | PlainMessage<Change_Undo> | undefined, b: Change_Undo | PlainMessage<Change_Undo> | undefined): boolean {
    return proto3.util.equals(Change_Undo, a, b);
  }
}

/**
 * @generated from message gogame.v2.Change.End
 */
export class Change_End extends Message<Change_End> {
  /**
   * @generated from field: bool draw = 3;
   */
  draw = false;

  /**
   * @generated from field: gogame.v2.Player winner = 9;
   */
  winner?: Player;

  /**
   * @generated from field: string won_by = 10;
   */
  wonBy = "";

  constructor(data?: PartialMessage<Change_End>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Change.End";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "draw", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "winner", kind: "message", T: Player },
    { no: 10, name: "won_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_End {
    return new Change_End().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_End {
    return new Change_End().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_End {
    return new Change_End().fromJsonString(jsonString, options);
  }

  static equals(a: Change_End | PlainMessage<Change_End> | undefined, b: Change_End | PlainMessage<Change_End> | undefined): boolean {
    return proto3.util.equals(Change_End, a, b);
  }
}

/**
 * @generated from message gogame.v2.Game
 */
export class Game extends Message<Game> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 rev = 2;
   */
  rev = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: gogame.v2.Player player1 = 4;
   */
  player1?: Player;

  /**
   * @generated from field: gogame.v2.Player player2 = 5;
   */
  player2?: Player;

  /**
   * @generated from field: repeated gogame.v2.Change changes = 8;
   */
  changes: Change[] = [];

  /**
   * @generated from field: gogame.v2.Board board = 11;
   */
  board?: Board;

  constructor(data?: PartialMessage<Game>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Game";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rev", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "player1", kind: "message", T: Player },
    { no: 5, name: "player2", kind: "message", T: Player },
    { no: 8, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 11, name: "board", kind: "message", T: Board },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Game {
    return new Game().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Game {
    return new Game().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Game {
    return new Game().fromJsonString(jsonString, options);
  }

  static equals(a: Game | PlainMessage<Game> | undefined, b: Game | PlainMessage<Game> | undefined): boolean {
    return proto3.util.equals(Game, a, b);
  }
}

/**
 * @generated from message gogame.v2.Row
 */
export class Row extends Message<Row> {
  /**
   * @generated from field: repeated gogame.v2.Color colors = 1;
   */
  colors: Color[] = [];

  constructor(data?: PartialMessage<Row>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Row";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "colors", kind: "enum", T: proto3.getEnumType(Color), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Row {
    return new Row().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Row {
    return new Row().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Row {
    return new Row().fromJsonString(jsonString, options);
  }

  static equals(a: Row | PlainMessage<Row> | undefined, b: Row | PlainMessage<Row> | undefined): boolean {
    return proto3.util.equals(Row, a, b);
  }
}

/**
 * @generated from message gogame.v2.Board
 */
export class Board extends Message<Board> {
  /**
   * @generated from field: int32 size = 1;
   */
  size = 0;

  /**
   * @generated from field: repeated gogame.v2.Row rows = 2;
   */
  rows: Row[] = [];

  constructor(data?: PartialMessage<Board>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.Board";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "rows", kind: "message", T: Row, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Board {
    return new Board().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Board {
    return new Board().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Board {
    return new Board().fromJsonString(jsonString, options);
  }

  static equals(a: Board | PlainMessage<Board> | undefined, b: Board | PlainMessage<Board> | undefined): boolean {
    return proto3.util.equals(Board, a, b);
  }
}

/**
 * @generated from message gogame.v2.CreateGameRequest
 */
export class CreateGameRequest extends Message<CreateGameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: gogame.v2.Player player1 = 2;
   */
  player1?: Player;

  constructor(data?: PartialMessage<CreateGameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.CreateGameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player1", kind: "message", T: Player },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGameRequest {
    return new CreateGameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGameRequest {
    return new CreateGameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGameRequest {
    return new CreateGameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGameRequest | PlainMessage<CreateGameRequest> | undefined, b: CreateGameRequest | PlainMessage<CreateGameRequest> | undefined): boolean {
    return proto3.util.equals(CreateGameRequest, a, b);
  }
}

/**
 * @generated from message gogame.v2.CreateGameResponse
 */
export class CreateGameResponse extends Message<CreateGameResponse> {
  /**
   * @generated from field: gogame.v2.Game game = 1;
   */
  game?: Game;

  constructor(data?: PartialMessage<CreateGameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.CreateGameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGameResponse {
    return new CreateGameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGameResponse {
    return new CreateGameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGameResponse {
    return new CreateGameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGameResponse | PlainMessage<CreateGameResponse> | undefined, b: CreateGameResponse | PlainMessage<CreateGameResponse> | undefined): boolean {
    return proto3.util.equals(CreateGameResponse, a, b);
  }
}

/**
 * @generated from message gogame.v2.JoinGameRequest
 */
export class JoinGameRequest extends Message<JoinGameRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: gogame.v2.Player player2 = 2;
   */
  player2?: Player;

  constructor(data?: PartialMessage<JoinGameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.JoinGameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player2", kind: "message", T: Player },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinGameRequest {
    return new JoinGameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinGameRequest {
    return new JoinGameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinGameRequest {
    return new JoinGameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinGameRequest | PlainMessage<JoinGameRequest> | undefined, b: JoinGameRequest | PlainMessage<JoinGameRequest> | undefined): boolean {
    return proto3.util.equals(JoinGameRequest, a, b);
  }
}

/**
 * @generated from message gogame.v2.JoinGameResponse
 */
export class JoinGameResponse extends Message<JoinGameResponse> {
  /**
   * @generated from field: gogame.v2.Game game = 1;
   */
  game?: Game;

  constructor(data?: PartialMessage<JoinGameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.JoinGameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinGameResponse {
    return new JoinGameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinGameResponse {
    return new JoinGameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinGameResponse {
    return new JoinGameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinGameResponse | PlainMessage<JoinGameResponse> | undefined, b: JoinGameResponse | PlainMessage<JoinGameResponse> | undefined): boolean {
    return proto3.util.equals(JoinGameResponse, a, b);
  }
}

/**
 * @generated from message gogame.v2.StreamGamesRequest
 */
export class StreamGamesRequest extends Message<StreamGamesRequest> {
  constructor(data?: PartialMessage<StreamGamesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.StreamGamesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamGamesRequest {
    return new StreamGamesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamGamesRequest {
    return new StreamGamesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamGamesRequest {
    return new StreamGamesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamGamesRequest | PlainMessage<StreamGamesRequest> | undefined, b: StreamGamesRequest | PlainMessage<StreamGamesRequest> | undefined): boolean {
    return proto3.util.equals(StreamGamesRequest, a, b);
  }
}

/**
 * @generated from message gogame.v2.StreamGamesResponse
 */
export class StreamGamesResponse extends Message<StreamGamesResponse> {
  /**
   * @generated from field: gogame.v2.Game game = 1;
   */
  game?: Game;

  constructor(data?: PartialMessage<StreamGamesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.StreamGamesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamGamesResponse {
    return new StreamGamesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamGamesResponse {
    return new StreamGamesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamGamesResponse {
    return new StreamGamesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamGamesResponse | PlainMessage<StreamGamesResponse> | undefined, b: StreamGamesResponse | PlainMessage<StreamGamesResponse> | undefined): boolean {
    return proto3.util.equals(StreamGamesResponse, a, b);
  }
}

/**
 * @generated from message gogame.v2.StreamEventsRequest
 */
export class StreamEventsRequest extends Message<StreamEventsRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  constructor(data?: PartialMessage<StreamEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.StreamEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEventsRequest | PlainMessage<StreamEventsRequest> | undefined, b: StreamEventsRequest | PlainMessage<StreamEventsRequest> | undefined): boolean {
    return proto3.util.equals(StreamEventsRequest, a, b);
  }
}

/**
 * @generated from message gogame.v2.StreamEventsResponse
 */
export class StreamEventsResponse extends Message<StreamEventsResponse> {
  /**
   * @generated from field: gogame.v2.Game game = 1;
   */
  game?: Game;

  constructor(data?: PartialMessage<StreamEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.StreamEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEventsResponse | PlainMessage<StreamEventsResponse> | undefined, b: StreamEventsResponse | PlainMessage<StreamEventsResponse> | undefined): boolean {
    return proto3.util.equals(StreamEventsResponse, a, b);
  }
}

/**
 * @generated from message gogame.v2.MoveRequest
 */
export class MoveRequest extends Message<MoveRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: int32 game_rev = 2;
   */
  gameRev = 0;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId = "";

  /**
   * @generated from field: int32 move_x = 4;
   */
  moveX = 0;

  /**
   * @generated from field: int32 move_y = 5;
   */
  moveY = 0;

  constructor(data?: PartialMessage<MoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.MoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_rev", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "move_x", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "move_y", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveRequest {
    return new MoveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveRequest {
    return new MoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveRequest {
    return new MoveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MoveRequest | PlainMessage<MoveRequest> | undefined, b: MoveRequest | PlainMessage<MoveRequest> | undefined): boolean {
    return proto3.util.equals(MoveRequest, a, b);
  }
}

/**
 * @generated from message gogame.v2.MoveResponse
 */
export class MoveResponse extends Message<MoveResponse> {
  /**
   * @generated from field: gogame.v2.Game game = 1;
   */
  game?: Game;

  constructor(data?: PartialMessage<MoveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.MoveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveResponse {
    return new MoveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveResponse {
    return new MoveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveResponse {
    return new MoveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MoveResponse | PlainMessage<MoveResponse> | undefined, b: MoveResponse | PlainMessage<MoveResponse> | undefined): boolean {
    return proto3.util.equals(MoveResponse, a, b);
  }
}

/**
 * @generated from message gogame.v2.PassRequest
 */
export class PassRequest extends Message<PassRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: int32 game_rev = 2;
   */
  gameRev = 0;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId = "";

  constructor(data?: PartialMessage<PassRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.PassRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_rev", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PassRequest {
    return new PassRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PassRequest {
    return new PassRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PassRequest {
    return new PassRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PassRequest | PlainMessage<PassRequest> | undefined, b: PassRequest | PlainMessage<PassRequest> | undefined): boolean {
    return proto3.util.equals(PassRequest, a, b);
  }
}

/**
 * @generated from message gogame.v2.PassResponse
 */
export class PassResponse extends Message<PassResponse> {
  /**
   * @generated from field: gogame.v2.Game game = 1;
   */
  game?: Game;

  constructor(data?: PartialMessage<PassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.PassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PassResponse {
    return new PassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PassResponse {
    return new PassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PassResponse {
    return new PassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PassResponse | PlainMessage<PassResponse> | undefined, b: PassResponse | PlainMessage<PassResponse> | undefined): boolean {
    return proto3.util.equals(PassResponse, a, b);
  }
}

/**
 * @generated from message gogame.v2.UndoRequest
 */
export class UndoRequest extends Message<UndoRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: int32 game_rev = 2;
   */
  gameRev = 0;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId = "";

  /**
   * @generated from field: bool accept = 4;
   */
  accept = false;

  constructor(data?: PartialMessage<UndoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.UndoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_rev", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "accept", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndoRequest {
    return new UndoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndoRequest {
    return new UndoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndoRequest {
    return new UndoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndoRequest | PlainMessage<UndoRequest> | undefined, b: UndoRequest | PlainMessage<UndoRequest> | undefined): boolean {
    return proto3.util.equals(UndoRequest, a, b);
  }
}

/**
 * @generated from message gogame.v2.UndoResponse
 */
export class UndoResponse extends Message<UndoResponse> {
  /**
   * @generated from field: gogame.v2.Game game = 1;
   */
  game?: Game;

  constructor(data?: PartialMessage<UndoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.UndoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndoResponse {
    return new UndoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndoResponse {
    return new UndoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndoResponse {
    return new UndoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UndoResponse | PlainMessage<UndoResponse> | undefined, b: UndoResponse | PlainMessage<UndoResponse> | undefined): boolean {
    return proto3.util.equals(UndoResponse, a, b);
  }
}

/**
 * @generated from message gogame.v2.ResignRequest
 */
export class ResignRequest extends Message<ResignRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: string player_id = 3;
   */
  playerId = "";

  constructor(data?: PartialMessage<ResignRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.ResignRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResignRequest {
    return new ResignRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResignRequest {
    return new ResignRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResignRequest {
    return new ResignRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResignRequest | PlainMessage<ResignRequest> | undefined, b: ResignRequest | PlainMessage<ResignRequest> | undefined): boolean {
    return proto3.util.equals(ResignRequest, a, b);
  }
}

/**
 * @generated from message gogame.v2.ResignResponse
 */
export class ResignResponse extends Message<ResignResponse> {
  /**
   * @generated from field: gogame.v2.Game game = 1;
   */
  game?: Game;

  constructor(data?: PartialMessage<ResignResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gogame.v2.ResignResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResignResponse {
    return new ResignResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResignResponse {
    return new ResignResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResignResponse {
    return new ResignResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResignResponse | PlainMessage<ResignResponse> | undefined, b: ResignResponse | PlainMessage<ResignResponse> | undefined): boolean {
    return proto3.util.equals(ResignResponse, a, b);
  }
}

