syntax = "proto3";

package gogame.v1;

enum Color {
  COLOR_UNSPECIFIED = 0;
  COLOR_BLACK = 1;
  COLOR_WHITE = 2;
}

enum State {
  STATE_UNSPECIFIED = 0;
  STATE_CREATED = 1;
  STATE_STARTED = 2;
  STATE_MOVE = 3;
  STATE_ENDED = 4;
}

message Player {
  string id = 1;
  string name = 2;

  int32 captured_stones = 3;
}

message Move {
  // current move
  string player_id = 1;
  Color color = 2;

  // make move
  int32 x = 3;
  int32 y = 4;

  // pass; set by server for history
  bool pass = 5;
}

message Game {
  message Undo {
    bool requested = 1;
    string requestee_player_id = 2;
    int32 decision = 3;
  }

  // created
  string id = 1;
  int32 rev = 2;
  string name = 3;
  Player player1 = 4;
  Player player2 = 5;
  State state = 6;

  // started
  Move current_move = 7;
  repeated Move previous_moves = 8;
  Board board = 11;

  // ended
  Player winner = 9;
  string won_by = 10;

  Undo undo = 12;
}

message Row {
  repeated Color colors = 1;
}

message Board {
  int32 size = 1;
  repeated Row rows = 2;
}

message CreateGameRequest {
  string name = 1;
  Player player1 = 2;
}

message CreateGameResponse {
  Game game = 1;
}

message JoinGameRequest {
  string game_id = 1;
  Player player2 = 2;
}

message JoinGameResponse {
  Game game = 1;
}

message StreamVacantGamesRequest {

}

message StreamVacantGamesResponse {
  Game game = 1;
}

message StreamGameEventsRequest {
  string game_id = 1;
}

message StreamGameEventsResponse {
  Game game = 1;
}

message MakeMoveRequest {
  string game_id = 1;
  int32 game_rev = 2;
  Move move = 3;
}

message MakeMoveResponse {
  Game game = 1;
}

message PassRequest {
  string game_id = 1;
  int32 game_rev = 2;
  string player_id = 3;
}

message PassResponse {
  Game game = 1;
}

message ResignRequest {
  string game_id = 1;
  string player_id = 3;
}

message ResignResponse {
  Game game = 1;
}

message UndoRequest {
  string game_id = 1;
  int32 game_rev = 2;
  string player_id = 3;

  bool request = 4;
  int32 decision = 5;
}

message UndoResponse {
  Game game = 1;
}

service GameService {
  rpc CreateGame(CreateGameRequest) returns (CreateGameResponse) {}
  rpc StreamVacantGames(StreamVacantGamesRequest) returns(stream StreamVacantGamesResponse) {}
  rpc JoinGame(JoinGameRequest) returns (JoinGameResponse) {}
  rpc StreamGameEvents(StreamGameEventsRequest) returns(stream StreamGameEventsResponse) {}
  rpc MakeMove(MakeMoveRequest) returns (MakeMoveResponse) {}
  rpc Resign(ResignRequest) returns (ResignResponse) {}
  rpc Pass(PassRequest) returns (PassResponse) {}
  rpc Undo(UndoRequest) returns (UndoResponse) {}
}