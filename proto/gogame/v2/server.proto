syntax = "proto3";

package gogame.v2;

enum Color {
  COLOR_UNSPECIFIED = 0;
  COLOR_BLACK = 1;
  COLOR_WHITE = 2;
}

message Player {
  string id = 1;
  string name = 2;
}

message Change {
  message Move {
    string player_id = 1;
    Color color = 2;
    int32 x = 3;
    int32 y = 4;

    int32 captured_stones = 5;
  }

  message Pass {
    string player_id = 1;
  }

  message Undo {
    string player_id = 1;
    bool accepted = 3;
  }

  message End {
    bool draw = 3;
    Player winner = 9;
    string won_by = 10;
  }

  oneof change {
    Move move = 1;
    Pass pass = 2;
    Undo undo = 3;
    End end = 4;
  }
}

message Game {
  string id = 1;
  int32 rev = 2;
  string name = 3;
  Player player1 = 4;
  Player player2 = 5;

  repeated Change changes = 8;
  Board board = 11;
}

message Row {
  repeated Color colors = 1;
}

message Board {
  int32 size = 1;
  repeated Row rows = 2;
}

message CreateGameRequest {
  string name = 1;
  Player player1 = 2;
}

message CreateGameResponse {
  Game game = 1;
}

message JoinGameRequest {
  string game_id = 1;
  Player player2 = 2;
}

message JoinGameResponse {
  Game game = 1;
}

message StreamGamesRequest {

}

message StreamGamesResponse {
  Game game = 1;
}

message StreamEventsRequest {
  string game_id = 1;
}

message StreamEventsResponse {
  Game game = 1;
}

message MoveRequest {
  string game_id = 1;
  int32 game_rev = 2;
  string player_id = 3;
  int32 move_x = 4;
  int32 move_y = 5;
}

message MoveResponse {
  Game game = 1;
}

message PassRequest {
  string game_id = 1;
  int32 game_rev = 2;
  string player_id = 3;
}

message PassResponse {
  Game game = 1;
}

message UndoRequest {
  string game_id = 1;
  int32 game_rev = 2;
  string player_id = 3;
  bool accept = 4;
}

message UndoResponse {
  Game game = 1;
}

message ResignRequest {
  string game_id = 1;
  string player_id = 3;
}

message ResignResponse {
  Game game = 1;
}

service RoomService {
  rpc CreateGame(CreateGameRequest) returns (CreateGameResponse) {}
  rpc JoinGame(JoinGameRequest) returns (JoinGameResponse) {}
  rpc StreamGames(StreamGamesRequest) returns(stream StreamGamesResponse) {}
}

service GameService {
  rpc StreamEvents(StreamEventsRequest) returns(stream StreamEventsResponse) {}
  rpc Move(MoveRequest) returns (MoveResponse) {}
  rpc Resign(ResignRequest) returns (ResignResponse) {}
  rpc Pass(PassRequest) returns (PassResponse) {}
  rpc Undo(UndoRequest) returns (UndoResponse) {}
}