// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gogame/v2/server.proto

package gogamev2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/makasim/gogame/protogen/gogame/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoomServiceName is the fully-qualified name of the RoomService service.
	RoomServiceName = "gogame.v2.RoomService"
	// GameServiceName is the fully-qualified name of the GameService service.
	GameServiceName = "gogame.v2.GameService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoomServiceCreateGameProcedure is the fully-qualified name of the RoomService's CreateGame RPC.
	RoomServiceCreateGameProcedure = "/gogame.v2.RoomService/CreateGame"
	// RoomServiceJoinGameProcedure is the fully-qualified name of the RoomService's JoinGame RPC.
	RoomServiceJoinGameProcedure = "/gogame.v2.RoomService/JoinGame"
	// RoomServiceStreamGamesProcedure is the fully-qualified name of the RoomService's StreamGames RPC.
	RoomServiceStreamGamesProcedure = "/gogame.v2.RoomService/StreamGames"
	// GameServiceStreamEventsProcedure is the fully-qualified name of the GameService's StreamEvents
	// RPC.
	GameServiceStreamEventsProcedure = "/gogame.v2.GameService/StreamEvents"
	// GameServiceMoveProcedure is the fully-qualified name of the GameService's Move RPC.
	GameServiceMoveProcedure = "/gogame.v2.GameService/Move"
	// GameServiceResignProcedure is the fully-qualified name of the GameService's Resign RPC.
	GameServiceResignProcedure = "/gogame.v2.GameService/Resign"
	// GameServicePassProcedure is the fully-qualified name of the GameService's Pass RPC.
	GameServicePassProcedure = "/gogame.v2.GameService/Pass"
	// GameServiceUndoProcedure is the fully-qualified name of the GameService's Undo RPC.
	GameServiceUndoProcedure = "/gogame.v2.GameService/Undo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	roomServiceServiceDescriptor            = v2.File_gogame_v2_server_proto.Services().ByName("RoomService")
	roomServiceCreateGameMethodDescriptor   = roomServiceServiceDescriptor.Methods().ByName("CreateGame")
	roomServiceJoinGameMethodDescriptor     = roomServiceServiceDescriptor.Methods().ByName("JoinGame")
	roomServiceStreamGamesMethodDescriptor  = roomServiceServiceDescriptor.Methods().ByName("StreamGames")
	gameServiceServiceDescriptor            = v2.File_gogame_v2_server_proto.Services().ByName("GameService")
	gameServiceStreamEventsMethodDescriptor = gameServiceServiceDescriptor.Methods().ByName("StreamEvents")
	gameServiceMoveMethodDescriptor         = gameServiceServiceDescriptor.Methods().ByName("Move")
	gameServiceResignMethodDescriptor       = gameServiceServiceDescriptor.Methods().ByName("Resign")
	gameServicePassMethodDescriptor         = gameServiceServiceDescriptor.Methods().ByName("Pass")
	gameServiceUndoMethodDescriptor         = gameServiceServiceDescriptor.Methods().ByName("Undo")
)

// RoomServiceClient is a client for the gogame.v2.RoomService service.
type RoomServiceClient interface {
	CreateGame(context.Context, *connect.Request[v2.CreateGameRequest]) (*connect.Response[v2.CreateGameResponse], error)
	JoinGame(context.Context, *connect.Request[v2.JoinGameRequest]) (*connect.Response[v2.JoinGameResponse], error)
	StreamGames(context.Context, *connect.Request[v2.StreamGamesRequest]) (*connect.ServerStreamForClient[v2.StreamGamesResponse], error)
}

// NewRoomServiceClient constructs a client for the gogame.v2.RoomService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoomServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roomServiceClient{
		createGame: connect.NewClient[v2.CreateGameRequest, v2.CreateGameResponse](
			httpClient,
			baseURL+RoomServiceCreateGameProcedure,
			connect.WithSchema(roomServiceCreateGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		joinGame: connect.NewClient[v2.JoinGameRequest, v2.JoinGameResponse](
			httpClient,
			baseURL+RoomServiceJoinGameProcedure,
			connect.WithSchema(roomServiceJoinGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamGames: connect.NewClient[v2.StreamGamesRequest, v2.StreamGamesResponse](
			httpClient,
			baseURL+RoomServiceStreamGamesProcedure,
			connect.WithSchema(roomServiceStreamGamesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// roomServiceClient implements RoomServiceClient.
type roomServiceClient struct {
	createGame  *connect.Client[v2.CreateGameRequest, v2.CreateGameResponse]
	joinGame    *connect.Client[v2.JoinGameRequest, v2.JoinGameResponse]
	streamGames *connect.Client[v2.StreamGamesRequest, v2.StreamGamesResponse]
}

// CreateGame calls gogame.v2.RoomService.CreateGame.
func (c *roomServiceClient) CreateGame(ctx context.Context, req *connect.Request[v2.CreateGameRequest]) (*connect.Response[v2.CreateGameResponse], error) {
	return c.createGame.CallUnary(ctx, req)
}

// JoinGame calls gogame.v2.RoomService.JoinGame.
func (c *roomServiceClient) JoinGame(ctx context.Context, req *connect.Request[v2.JoinGameRequest]) (*connect.Response[v2.JoinGameResponse], error) {
	return c.joinGame.CallUnary(ctx, req)
}

// StreamGames calls gogame.v2.RoomService.StreamGames.
func (c *roomServiceClient) StreamGames(ctx context.Context, req *connect.Request[v2.StreamGamesRequest]) (*connect.ServerStreamForClient[v2.StreamGamesResponse], error) {
	return c.streamGames.CallServerStream(ctx, req)
}

// RoomServiceHandler is an implementation of the gogame.v2.RoomService service.
type RoomServiceHandler interface {
	CreateGame(context.Context, *connect.Request[v2.CreateGameRequest]) (*connect.Response[v2.CreateGameResponse], error)
	JoinGame(context.Context, *connect.Request[v2.JoinGameRequest]) (*connect.Response[v2.JoinGameResponse], error)
	StreamGames(context.Context, *connect.Request[v2.StreamGamesRequest], *connect.ServerStream[v2.StreamGamesResponse]) error
}

// NewRoomServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomServiceHandler(svc RoomServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roomServiceCreateGameHandler := connect.NewUnaryHandler(
		RoomServiceCreateGameProcedure,
		svc.CreateGame,
		connect.WithSchema(roomServiceCreateGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceJoinGameHandler := connect.NewUnaryHandler(
		RoomServiceJoinGameProcedure,
		svc.JoinGame,
		connect.WithSchema(roomServiceJoinGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceStreamGamesHandler := connect.NewServerStreamHandler(
		RoomServiceStreamGamesProcedure,
		svc.StreamGames,
		connect.WithSchema(roomServiceStreamGamesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gogame.v2.RoomService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoomServiceCreateGameProcedure:
			roomServiceCreateGameHandler.ServeHTTP(w, r)
		case RoomServiceJoinGameProcedure:
			roomServiceJoinGameHandler.ServeHTTP(w, r)
		case RoomServiceStreamGamesProcedure:
			roomServiceStreamGamesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoomServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomServiceHandler struct{}

func (UnimplementedRoomServiceHandler) CreateGame(context.Context, *connect.Request[v2.CreateGameRequest]) (*connect.Response[v2.CreateGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gogame.v2.RoomService.CreateGame is not implemented"))
}

func (UnimplementedRoomServiceHandler) JoinGame(context.Context, *connect.Request[v2.JoinGameRequest]) (*connect.Response[v2.JoinGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gogame.v2.RoomService.JoinGame is not implemented"))
}

func (UnimplementedRoomServiceHandler) StreamGames(context.Context, *connect.Request[v2.StreamGamesRequest], *connect.ServerStream[v2.StreamGamesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("gogame.v2.RoomService.StreamGames is not implemented"))
}

// GameServiceClient is a client for the gogame.v2.GameService service.
type GameServiceClient interface {
	StreamEvents(context.Context, *connect.Request[v2.StreamEventsRequest]) (*connect.ServerStreamForClient[v2.StreamEventsResponse], error)
	Move(context.Context, *connect.Request[v2.MoveRequest]) (*connect.Response[v2.MoveResponse], error)
	Resign(context.Context, *connect.Request[v2.ResignRequest]) (*connect.Response[v2.ResignResponse], error)
	Pass(context.Context, *connect.Request[v2.PassRequest]) (*connect.Response[v2.PassResponse], error)
	Undo(context.Context, *connect.Request[v2.UndoRequest]) (*connect.Response[v2.UndoResponse], error)
}

// NewGameServiceClient constructs a client for the gogame.v2.GameService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gameServiceClient{
		streamEvents: connect.NewClient[v2.StreamEventsRequest, v2.StreamEventsResponse](
			httpClient,
			baseURL+GameServiceStreamEventsProcedure,
			connect.WithSchema(gameServiceStreamEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		move: connect.NewClient[v2.MoveRequest, v2.MoveResponse](
			httpClient,
			baseURL+GameServiceMoveProcedure,
			connect.WithSchema(gameServiceMoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resign: connect.NewClient[v2.ResignRequest, v2.ResignResponse](
			httpClient,
			baseURL+GameServiceResignProcedure,
			connect.WithSchema(gameServiceResignMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pass: connect.NewClient[v2.PassRequest, v2.PassResponse](
			httpClient,
			baseURL+GameServicePassProcedure,
			connect.WithSchema(gameServicePassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		undo: connect.NewClient[v2.UndoRequest, v2.UndoResponse](
			httpClient,
			baseURL+GameServiceUndoProcedure,
			connect.WithSchema(gameServiceUndoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameServiceClient implements GameServiceClient.
type gameServiceClient struct {
	streamEvents *connect.Client[v2.StreamEventsRequest, v2.StreamEventsResponse]
	move         *connect.Client[v2.MoveRequest, v2.MoveResponse]
	resign       *connect.Client[v2.ResignRequest, v2.ResignResponse]
	pass         *connect.Client[v2.PassRequest, v2.PassResponse]
	undo         *connect.Client[v2.UndoRequest, v2.UndoResponse]
}

// StreamEvents calls gogame.v2.GameService.StreamEvents.
func (c *gameServiceClient) StreamEvents(ctx context.Context, req *connect.Request[v2.StreamEventsRequest]) (*connect.ServerStreamForClient[v2.StreamEventsResponse], error) {
	return c.streamEvents.CallServerStream(ctx, req)
}

// Move calls gogame.v2.GameService.Move.
func (c *gameServiceClient) Move(ctx context.Context, req *connect.Request[v2.MoveRequest]) (*connect.Response[v2.MoveResponse], error) {
	return c.move.CallUnary(ctx, req)
}

// Resign calls gogame.v2.GameService.Resign.
func (c *gameServiceClient) Resign(ctx context.Context, req *connect.Request[v2.ResignRequest]) (*connect.Response[v2.ResignResponse], error) {
	return c.resign.CallUnary(ctx, req)
}

// Pass calls gogame.v2.GameService.Pass.
func (c *gameServiceClient) Pass(ctx context.Context, req *connect.Request[v2.PassRequest]) (*connect.Response[v2.PassResponse], error) {
	return c.pass.CallUnary(ctx, req)
}

// Undo calls gogame.v2.GameService.Undo.
func (c *gameServiceClient) Undo(ctx context.Context, req *connect.Request[v2.UndoRequest]) (*connect.Response[v2.UndoResponse], error) {
	return c.undo.CallUnary(ctx, req)
}

// GameServiceHandler is an implementation of the gogame.v2.GameService service.
type GameServiceHandler interface {
	StreamEvents(context.Context, *connect.Request[v2.StreamEventsRequest], *connect.ServerStream[v2.StreamEventsResponse]) error
	Move(context.Context, *connect.Request[v2.MoveRequest]) (*connect.Response[v2.MoveResponse], error)
	Resign(context.Context, *connect.Request[v2.ResignRequest]) (*connect.Response[v2.ResignResponse], error)
	Pass(context.Context, *connect.Request[v2.PassRequest]) (*connect.Response[v2.PassResponse], error)
	Undo(context.Context, *connect.Request[v2.UndoRequest]) (*connect.Response[v2.UndoResponse], error)
}

// NewGameServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameServiceHandler(svc GameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameServiceStreamEventsHandler := connect.NewServerStreamHandler(
		GameServiceStreamEventsProcedure,
		svc.StreamEvents,
		connect.WithSchema(gameServiceStreamEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceMoveHandler := connect.NewUnaryHandler(
		GameServiceMoveProcedure,
		svc.Move,
		connect.WithSchema(gameServiceMoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceResignHandler := connect.NewUnaryHandler(
		GameServiceResignProcedure,
		svc.Resign,
		connect.WithSchema(gameServiceResignMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServicePassHandler := connect.NewUnaryHandler(
		GameServicePassProcedure,
		svc.Pass,
		connect.WithSchema(gameServicePassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceUndoHandler := connect.NewUnaryHandler(
		GameServiceUndoProcedure,
		svc.Undo,
		connect.WithSchema(gameServiceUndoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gogame.v2.GameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameServiceStreamEventsProcedure:
			gameServiceStreamEventsHandler.ServeHTTP(w, r)
		case GameServiceMoveProcedure:
			gameServiceMoveHandler.ServeHTTP(w, r)
		case GameServiceResignProcedure:
			gameServiceResignHandler.ServeHTTP(w, r)
		case GameServicePassProcedure:
			gameServicePassHandler.ServeHTTP(w, r)
		case GameServiceUndoProcedure:
			gameServiceUndoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameServiceHandler struct{}

func (UnimplementedGameServiceHandler) StreamEvents(context.Context, *connect.Request[v2.StreamEventsRequest], *connect.ServerStream[v2.StreamEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("gogame.v2.GameService.StreamEvents is not implemented"))
}

func (UnimplementedGameServiceHandler) Move(context.Context, *connect.Request[v2.MoveRequest]) (*connect.Response[v2.MoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gogame.v2.GameService.Move is not implemented"))
}

func (UnimplementedGameServiceHandler) Resign(context.Context, *connect.Request[v2.ResignRequest]) (*connect.Response[v2.ResignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gogame.v2.GameService.Resign is not implemented"))
}

func (UnimplementedGameServiceHandler) Pass(context.Context, *connect.Request[v2.PassRequest]) (*connect.Response[v2.PassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gogame.v2.GameService.Pass is not implemented"))
}

func (UnimplementedGameServiceHandler) Undo(context.Context, *connect.Request[v2.UndoRequest]) (*connect.Response[v2.UndoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gogame.v2.GameService.Undo is not implemented"))
}
